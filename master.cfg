# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.www import auth
from archbuild import archbuild

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("slave1", "random-password")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(ArchBuildGitPoller(
        'git://github.com/papyros/repository.git',
        workdir='gitpoller-workdir', branch='testing',
        pollinterval=300, ignored_authors=['Buildbot <buildbot@papyros.io>']))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

# Every night, build the repository, create an ISO, and publish an OSTree commit
c['schedulers'].append(schedulers.Nightly(name='nightly',
                            branch='testing',
                            builderNames=['nightly'],
                            hour=3,
                            minute=0))

# On committing package config changes, build the repository
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="checkin",
                            change_filter=util.ChangeFilter(branch='testing'),
                            treeStableTimer=None,
                            builderNames=['repository_i686', 'repository_x86_64']))

# Manually trigger a rebuild of the repo 
c['schedulers'].append(schedulers.ForceScheduler(
                            name="manual",
                            builderNames=['repository_i686', 'repository_x86_64']))

c['schedulers'].append(schedulers.Triggerable(name="repository",
                builderNames=["repository_i686", "repository_x86_64"]))
c['schedulers'].append(schedulers.Triggerable(name="ostree",
                builderNames=["ostree_i686", "ostree_x86_64"]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.


ostree_factory = util.BuildFactory()

nightly_factory = util.BuildFactory()
nightly_factory.addStep(steps.Trigger(schedulerNames=['repository'],
                                      waitForFinish=True))
nightly_factory.addStep(steps.Trigger(schedulerNames=['ostree'],
                                      waitForFinish=True))

c['builders'] = []
c['builders'].append(util.BuilderConfig(name="nightly",
        slavenames=["slave1"],
        factory=nightly_factory))
c['builders'].append(util.BuilderConfig(name="repository_x86_64",
        slavenames=["slave1"],
        factory=archbuild.ArchRepositoryFactory(
                steps.Git(repourl='git://github.com/papyros/repository.git', 
                          mode='incremental'),
                arch='x86_64')))
c['builders'].append(util.BuilderConfig(name="repository_i686",
        slavenames=["slave1"],
        factory=archbuild.ArchRepositoryFactory(
                steps.Git(repourl='git://github.com/papyros/repository.git', 
                          mode='incremental'),
                arch='i686')))
c['builders'].append(util.BuilderConfig(name="ostree_x86_64",
        slavenames=["slave1"],
        factory=ostree_factory))
c['builders'].append(util.BuilderConfig(name="ostree_i686",
        slavenames=["slave1"],
        factory=ostree_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Papyros"
c['titleURL'] = "http://papyros.io"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://dash.papyros.io:8020/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8020,
                plugins=dict(waterfall_view={}, console_view={}),
                auth=auth.UserPasswordAuth([('sonrisesoftware@gmail.com', 'random-pass')]))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
